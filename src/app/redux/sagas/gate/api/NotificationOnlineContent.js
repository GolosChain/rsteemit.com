import React, { Fragment, PureComponent } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { Link } from 'react-router';
import { Map } from 'immutable';

import tt from 'counterpart';
import normalizeProfile from 'app/utils/NormalizeProfile';

import Avatar from 'src/app/components/common/Avatar';

const Wrapper = styled.div`
    display: flex;
    align-items: center;
`;

const AvatarWrapper = styled.div`
    margin-right: 18px;
`;

const Message = styled.div`
    font-family: ${theme => theme.fontFamily};
    font-size: 14px;
`;

export default class NotificationContent extends PureComponent {
    static propTypes = {
        type: PropTypes.string,
        account: PropTypes.instanceOf(Map),

        title: PropTypes.string,
        link: PropTypes.string,
        amount: PropTypes.number,
    };

    renderMessage() {
        const {
            type,
            account,

            title,
            link,
            amount,
        } = this.props;

        const userName = account.get('name');

        if (type === 'vote') {
            return (
                <Fragment>
                    <Link to={`/@${userName}`}>@{userName}</Link> –æ—Ü–µ–Ω–∏–ª –≤–∞—à—É –∑–∞–ø–∏—Å—å{' '}
                    <Link to={link}>{title}</Link>. üëç
                </Fragment>
            );
        } else if (type === 'flag') {
            return (
                <Fragment>
                    <Link to={`/@${userName}`}>@{userName}</Link> –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –æ—Ü–µ–Ω–∏–ª –≤–∞—à—É –∑–∞–ø–∏—Å—å{' '}
                    <Link to={link}>{title}</Link>. üòµ üí∏
                </Fragment>
            );
        } else if (type === 'transfer') {
            return (
                <Fragment>
                    <Link to={`/@${userName}`}>@{userName}</Link> –ø–µ—Ä–µ–≤–µ–ª –Ω–∞ –≤–∞—à —Å—á–µ—Ç {amount}{' '}
                    –ì–æ–ª–æ—Å–æ–≤. üí∏
                </Fragment>
            );
        } else if (type === 'reply') {
            return (
                <Fragment>
                    <Link to={`/@${userName}`}>@{userName}</Link> –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à—É –∑–∞–ø–∏—Å—å{' '}
                    <Link to={link}>{title}</Link>. ‚úåÔ∏è
                </Fragment>
            );
        } else if (type === 'subscribe') {
            return (
                <Fragment>
                    <Link to={`/@${userName}`}>@{userName}</Link> –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤–∞—à –±–ª–æ–≥. üòä
                </Fragment>
            );
        } else if (type === 'unsubscribe') {
            return (
                <Fragment>
                    <Link to={`/@${userName}`}>@{userName}</Link> –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –≤–∞—à–µ–≥–æ –±–ª–æ–≥–∞. üòî
                </Fragment>
            );
        } else if (type === 'mention') {
            return (
                <Fragment>
                    <Link to={`/@${userName}`}>@{userName}</Link> —É–ø–æ–º—è–Ω—É–≤ –≤–∞—Å –≤ —Å–≤–æ–µ–π –∑–∞–ø–∏—Å–∏{' '}
                    <Link to={link}>{title}</Link>. ü§î
                </Fragment>
            );
        } else if (type === 'repost') {
            return (
                <Fragment>
                    <Link to={`/@${userName}`}>@{userName}</Link> —Å–¥–µ–ª–∞–ª —Ä–µ–ø–æ—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞{' '}
                    <Link to={link}>{title}</Link>. üòé
                </Fragment>
            );
        } else if (type === 'witnessVote') {
            return (
                <Fragment>
                    <Link to={`/@${userName}`}>@{userName}</Link> –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ –≤–∞—Å –∫–∞–∫ –∑–∞ –¥–µ–ª–µ–≥–∞—Ç–∞. üî•
                </Fragment>
            );
        } else if (type === 'witnessCancelVote') {
            return (
                <Fragment>
                    <Link to={`/@${userName}`}>@{userName}</Link> —Å–Ω—è–ª —Å–≤–æ–π –≥–æ–ª–æ—Å —Å –≤–∞—à–µ–π –¥–µ–ª–µ–≥–∞—Ç—Å–∫–æ–π –Ω–æ–¥—ã. üôà
                </Fragment>
            );
        }
    }

    render() {
        const { account } = this.props;
        const { profile_image } = normalizeProfile(account.toJS());

        return (
            <Wrapper>
                <AvatarWrapper>
                    <Link to={`/@${account.get('name')}`}>
                        <Avatar avatarUrl={profile_image} size={40} />
                    </Link>
                </AvatarWrapper>
                <Message>{this.renderMessage()}</Message>
            </Wrapper>
        );
    }
}
